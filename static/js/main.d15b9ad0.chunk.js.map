{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKA,UAAU,WAAWC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,qBAA+DC,IAAI,KAChG,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCHdC,G,MAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAEKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,WCJrDO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACxDG,SAAUF,MC4BHG,E,kDA3Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAE5C,WAAS,IAAD,SAC0BE,KAAKR,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAxB,GACvC,OAAOA,EAAQG,KAAKsB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAc,SAACiB,GAAD,OAAM,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACjG,cAAC,EAAD,CAAUvB,SAAUiB,W,GAtBVO,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d15b9ad0.chunk.js","sourcesContent":["import React from 'react';\r\nimport  './card.style.css';\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img className='img-size' src={`https://robohash.org/${props.monster.id}?set=set2&300x300`} alt=''/>\r\n        <h2>{props.monster.name}</h2>\r\n        <h3>{props.monster.email}</h3>\r\n    </div>\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return <div className='card-list'>\r\n             {\r\n                props.monsters.map(monster => <Card  key={monster.id} monster={monster}/> )\r\n            }\r\n        </div>\r\n}","import React from 'react';\r\nimport  './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return <input className='search' type='search' placeholder={placeholder} \r\n        onChange={handleChange}/>\r\n}","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (     \n      <div className=\"App\">     \n        <h1>Monsters Rolodex</h1>  \n        <SearchBox placeholder='search monster' handleChange={(e)=> this.setState({searchField: e.target.value})}/>\n        <CardList monsters={filteredMonsters}/>      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}